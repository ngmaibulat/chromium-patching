{
  "version": 3,
  "sources": ["../../../../../../../../../../devtools-frontend/src/front_end/core/platform/ServerTiming.ts"],
  "sourcesContent": ["// Copyright 2024 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport {compare} from './StringUtilities.js';\n\nexport interface NameValue {\n  name: string;\n  value: string;\n}\nconst defaultWarningMessages: ServerTimingParsingWarningMessage = {\n  deprecratedSyntax() {\n    return 'Deprecated syntax found. Please use: <name>;dur=<duration>;desc=<description>';\n  },\n  duplicateParameter(parameter) {\n    return `Duplicate parameter \"${parameter}\" ignored.`;\n  },\n  noValueFoundForParameter(parameter) {\n    return `No value found for parameter \"${parameter}\".`;\n  },\n  unrecognizedParameter(parameter) {\n    return `Unrecognized parameter \"${parameter}\".`;\n  },\n  extraneousTrailingCharacters() {\n    return 'Extraneous trailing characters.';\n  },\n  unableToParseValue(parameter, value) {\n    return `Unable to parse \"${parameter}\" value \"${value}\".`;\n  },\n};\n\nexport interface ServerTimingParsingWarningMessage {\n  deprecratedSyntax: () => string;\n  duplicateParameter: (parameter: string) => string;\n  noValueFoundForParameter: (parameter: string) => string;\n  unrecognizedParameter: (parameter: string) => string;\n  extraneousTrailingCharacters: () => string;\n  unableToParseValue: (parameter: string, value: string) => string;\n}\n\nexport class ServerTiming {\n  metric: string;\n  value: number;\n  description: string|null;\n  start: number|null;\n\n  constructor(metric: string, value: number, description: string|null, start: number|null) {\n    this.metric = metric;\n    this.value = value;\n    this.description = description;\n    this.start = start;\n  }\n\n  static parseHeaders(\n      headers: NameValue[],\n      warningMessages: ServerTimingParsingWarningMessage = defaultWarningMessages): ServerTiming[]|null {\n    const rawServerTimingHeaders = headers.filter(item => item.name.toLowerCase() === 'server-timing');\n    if (!rawServerTimingHeaders.length) {\n      return null;\n    }\n\n    const serverTimings = rawServerTimingHeaders.reduce((memo, header) => {\n      const timing = this.createFromHeaderValue(header.value, warningMessages);\n      memo.push(...timing.map(function(entry) {\n        return new ServerTiming(\n            entry.name, entry.hasOwnProperty('dur') ? entry.dur : null, entry.hasOwnProperty('desc') ? entry.desc : '',\n            entry.hasOwnProperty('start') ? entry.start : null);\n      }));\n      return memo;\n    }, ([] as ServerTiming[]));\n    serverTimings.sort((a, b) => compare(a.metric.toLowerCase(), b.metric.toLowerCase()));\n    return serverTimings;\n  }\n\n  /**\n   * TODO(crbug.com/1011811): Instead of using !Object<string, *> we should have a proper type\n   *                          with #name, desc and dur properties.\n   */\n  static createFromHeaderValue(\n      valueString: string, warningMessages: ServerTimingParsingWarningMessage = defaultWarningMessages): Array<{\n    // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [x: string]: any,\n  }> {\n    function trimLeadingWhiteSpace(): void {\n      valueString = valueString.replace(/^\\s*/, '');\n    }\n    function consumeDelimiter(char: string): boolean {\n      console.assert(char.length === 1);\n      trimLeadingWhiteSpace();\n      if (valueString.charAt(0) !== char) {\n        return false;\n      }\n\n      valueString = valueString.substring(1);\n      return true;\n    }\n    function consumeToken(): string|null {\n      // https://tools.ietf.org/html/rfc7230#appendix-B\n      const result = /^(?:\\s*)([\\w!#$%&'*+\\-.^`|~]+)(?:\\s*)(.*)/.exec(valueString);\n      if (!result) {\n        return null;\n      }\n\n      valueString = result[2];\n      return result[1];\n    }\n    function consumeTokenOrQuotedString(): string|null {\n      trimLeadingWhiteSpace();\n      if (valueString.charAt(0) === '\"') {\n        return consumeQuotedString();\n      }\n\n      return consumeToken();\n    }\n    function consumeQuotedString(): string|null {\n      console.assert(valueString.charAt(0) === '\"');\n      valueString = valueString.substring(1);  // remove leading DQUOTE\n\n      let value = '';\n      while (valueString.length) {\n        // split into two parts:\n        //  -everything before the first \" or \\\n        //  -everything else\n        const result = /^([^\"\\\\]*)(.*)/.exec(valueString);\n        if (!result) {\n          return null;  // not a valid quoted-string\n        }\n        value += result[1];\n        if (result[2].charAt(0) === '\"') {\n          // we have found our closing \"\n          valueString = result[2].substring(1);  // strip off everything after the closing \"\n          return value;                          // we are done here\n        }\n\n        console.assert(result[2].charAt(0) === '\\\\');\n        // special rules for \\ found in quoted-string (https://tools.ietf.org/html/rfc7230#section-3.2.6)\n        value += result[2].charAt(1);          // grab the character AFTER the \\ (if there was one)\n        valueString = result[2].substring(2);  // strip off \\ and next character\n      }\n\n      return null;  // not a valid quoted-string\n    }\n    function consumeExtraneous(): void {\n      const result = /([,;].*)/.exec(valueString);\n      if (result) {\n        valueString = result[1];\n      }\n    }\n\n    const result = [];\n    let name;\n    while ((name = consumeToken()) !== null) {\n      const entry = {name};\n\n      if (valueString.charAt(0) === '=') {\n        this.showWarning(warningMessages['deprecratedSyntax']());\n      }\n\n      while (consumeDelimiter(';')) {\n        let paramName;\n        if ((paramName = consumeToken()) === null) {\n          continue;\n        }\n\n        paramName = paramName.toLowerCase();\n        const parseParameter = this.getParserForParameter(paramName, warningMessages);\n        let paramValue: (string|null)|null = null;\n        if (consumeDelimiter('=')) {\n          // always parse the value, even if we don't recognize the parameter #name\n          paramValue = consumeTokenOrQuotedString();\n          consumeExtraneous();\n        }\n\n        if (parseParameter) {\n          // paramName is valid\n          if (entry.hasOwnProperty(paramName)) {\n            this.showWarning(warningMessages['duplicateParameter'](paramName));\n            continue;\n          }\n\n          if (paramValue === null) {\n            this.showWarning(warningMessages['noValueFoundForParameter'](paramName));\n          }\n\n          parseParameter.call(this, entry, paramValue);\n        } else {\n          // paramName is not valid\n          this.showWarning(warningMessages['unrecognizedParameter'](paramName));\n        }\n      }\n\n      result.push(entry);\n      if (!consumeDelimiter(',')) {\n        break;\n      }\n    }\n\n    if (valueString.length) {\n      this.showWarning(warningMessages['extraneousTrailingCharacters']());\n    }\n    return result;\n  }\n\n  static getParserForParameter(paramName: string, warningMessages: ServerTimingParsingWarningMessage):\n      ((arg0: {\n         // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n         // eslint-disable-next-line @typescript-eslint/no-explicit-any\n         [x: string]: any,\n       },\n        arg1: string|null) => void)|null {\n    switch (paramName) {\n      case 'dur': {\n        function durParser(\n            entry: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            paramValue: any): void {\n          entry.dur = 0;\n          if (paramValue !== null) {\n            const duration = parseFloat(paramValue);\n            if (isNaN(duration)) {\n              ServerTiming.showWarning(warningMessages['unableToParseValue'](paramName, paramValue));\n              return;\n            }\n            entry.dur = duration;\n          }\n        }\n        return durParser;\n      }\n      case 'start': {\n        function startParser(\n            entry: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            paramValue: any): void {\n          entry.start = null;\n          if (paramValue !== null) {\n            const start = parseFloat(paramValue);\n            if (isNaN(start)) {\n              ServerTiming.showWarning(warningMessages['unableToParseValue'](paramName, paramValue));\n              return;\n            }\n            entry.start = start;\n          }\n        }\n        return startParser;\n      }\n      case 'desc': {\n        function descParser(\n            entry: {\n              // TODO(crbug.com/1172300) Ignored during the jsdoc to ts migration\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              [x: string]: any,\n            },\n            paramValue: string|null): void {\n          entry.desc = paramValue || '';\n        }\n        return descParser;\n      }\n\n      default: {\n        return null;\n      }\n    }\n  }\n\n  static showWarning(msg: string): void {\n    console.warn(`ServerTiming: ${msg}`);\n  }\n}\n"],
  "mappings": "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",
  "names": ["result", "durParser", "startParser", "descParser"]
}
